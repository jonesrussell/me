---
description:
globs: src/lib/components/**/*.svelte
alwaysApply: false
---
# Component Styling Standards

## Core Principles
- Use container queries for responsive design
- Implement mobile-first approach
- Follow CSS custom properties for theming
- Maintain consistent spacing using design tokens
- Use `var(--measure)` for max-width constraints
- Apply `95cqi` for container-based sizing

## Layout Patterns
- Use CSS Grid for complex layouts
- Implement Flexbox for alignment
- Define container queries for component-level responsiveness
- Use `minmax()` for flexible grid layouts
- Maintain consistent container structure:
  ```css
  .component {
    container-type: inline-size;
    container-name: component-name;
    width: 100%;
    padding: var(--space-16) 0;
  }

  .container {
    width: 100%;
    max-width: min(var(--measure), 95cqi);
    margin: 0 auto;
    padding: 0 var(--space-4);
  }
  ```

## Responsive Design
- Start with mobile layout (min-width: 0)
- Use container queries for component-level breakpoints
- Implement fluid typography with `clamp()`
- Use relative units for responsive sizing:
  - Use `rem` for media query breakpoints:
    - `30rem` (≈ 480px) for tablet
    - `50rem` (≈ 800px) for small desktop
    - `75rem` (≈ 1200px) for large desktop
  - Use `cqi` for container-based sizing
  - Use `%` for fluid layouts

## CSS Best Practices
- Use `:global()` for targeting child components
- Implement CSS custom properties for dynamic values
- Follow BEM-like naming conventions
- Keep styles scoped to components
- Use modern CSS features:
  - Container queries
  - CSS Grid
  - Logical properties
  - Custom properties

## Component Structure
- Define container type and name for queries
- Use semantic class names
- Implement consistent spacing with design tokens
- Follow accessibility guidelines for styling
- Maintain consistent container structure across all pages

## Example Patterns
```css
.component {
  container-type: inline-size;
  container-name: component-name;
  width: 100%;
  padding: var(--space-16) 0;
}

.container {
  width: 100%;
  max-width: min(var(--measure), 95cqi);
  margin: 0 auto;
  padding: 0 var(--space-4);
}

@container component-name (width >= 30rem) {
  .container {
    max-width: min(var(--measure), 95cqi);
  }
}

@container component-name (width >= 50rem) {
  .container {
    max-width: min(var(--measure), 95cqi);
  }
}

@container component-name (width >= 75rem) {
  .container {
    max-width: min(var(--measure), 95cqi);
  }
}
```

## Design Tokens
- Use `--space-*` for consistent spacing
- Implement `--font-*` for typography
- Define `--color-*` for theming
- Use `--radius-*` for border radius
- Apply `--shadow-*` for elevation
- Use `--measure` for max-width constraints

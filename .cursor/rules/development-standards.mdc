---
description:
globs:
alwaysApply: false
---
# Development Standards

## Core Principles
- Use TypeScript for all new code
- Document code thoroughly with JSDoc comments
- Follow SOLID principles
- Write pure functions when possible
- Implement strict type checking
- Validate props at runtime
- Handle errors consistently

## Code Style
- Use semicolons consistently
- Prefer `const` declarations
- Limit lines to 100 characters
- Use 2-space indentation
- Follow naming conventions:
  - Interface names start with "I"
  - Type names end with "Type"
  - Use descriptive names for tests

## Architecture
- Organize code by feature
- Separate UI components from business logic
- Keep services stateless
- Use dependency injection
- Minimize component logic
- Maintain test independence

## Type System
- Store shared types in `src/types`
- Prefer interfaces over type aliases
- Document complex types
- Export types separately from implementations

## Services
- Use factory patterns for services
- Implement comprehensive error handling
- Add request caching where appropriate
- Include retry logic and timeouts
- Use middleware for cross-cutting concerns

## State Management
- Use custom stores with subscriptions
- Implement store persistence when needed
- Keep stores focused and lightweight
- Test state updates thoroughly

## Svelte Patterns
- Use runes for state management (`$state`, `$derived`, `$effect`)
- Use `$props` for component props
- Keep components small and semantic
- Use container queries for responsive design
- Implement error boundaries
- Test component lifecycle thoroughly
- Use CSS custom properties for theming
- Follow mobile-first approach
- Use modern CSS features (Grid, Flexbox, Container Queries)

## Component Structure
- Define clear component boundaries
- Use semantic HTML elements
- Implement proper accessibility attributes
- Follow consistent prop naming
- Use TypeScript for prop validation
- Keep component logic minimal
- Extract complex logic to services

## File Organization
- Group related components together
- Separate UI components from business logic
- Keep component files focused
- Use consistent file naming
- Maintain clear import structure

---
description:
globs:
alwaysApply: true
---
# **Svelte 5 Development Standards**

## **Core Principles**
- Use **runes** for state management and reactivity
- Follow **TypeScript best practices**
- Maintain **consistent component structure**
- Ensure **error handling and accessibility compliance**

## **State Management**
- `$state` â†’ **Reactive state**
- `$derived` â†’ **Computed values**
- `$effect` â†’ **Side effects & lifecycle handling**
- `$props` â†’ **Component properties**

### **Component Structure Example**
```svelte
<script lang="ts">
  // Typed props
  const { prop1, prop2 } = $props<{ prop1: string; prop2: number }>();

  // State management
  let count = $state(0);
  let doubled = $derived(count * 2);

  // Lifecycle and side effects
  $effect(() => {
    console.log('count changed:', count);
    return () => {
      // Cleanup logic
    };
  });
</script>
```

## **Optimization Strategies**
- Use `$derived` for expensive computations
- Avoid unnecessary state updates
- Ensure proper cleanup in `$effect`
- Optimize template rendering
- Apply memoization when needed

## **Deprecated Features & Restrictions**
ðŸš« **Avoid:**
- `$:` reactive declarations _(use runes instead)_
- `writable` / `readable` stores _(use runes instead)_
- `bind:this` _(use `use:` directive)_
- `onMount`, `beforeUpdate`, `afterUpdate`, `tick` _(use `$effect` instead)_
- **JSX syntax, slot elements, inline styles, unscoped global styles**

âœ… **Allowed Alternatives:**
- **Use Svelte template syntax** instead of JSX
- **Adopt modern Svelte features** _(runes-based reactivity)_
- **Use CSS custom properties** for dynamic styles
- **Scope global styles properly using `:global()`**

## **Best Practices**
- Keep components **modular & focused**
- Maintain **consistent naming & structure**
- Implement **error boundaries**
- Follow **accessibility & semantic HTML guidelines**
- Document **complex logic for maintainability**
- Use `console.debug` for **development logging**, but remove in production
